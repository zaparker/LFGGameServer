
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <h2>Sample Game Client</h2>
    <label>Player Name:</label><input type="text" data-bind="value: playerName" />
    <div data-bind="if: inGame">
        <h3>Current PLayers:</h3>
        <ul data-bind="foreach: players">
            <li><span data-bind="text: Name"></span><button type="button" data-bind="click: $parent.pokePlayer">Poke</button></li>
        </ul>
        <button type="button" data-bind="click: leaveGame">Leave Game</button>
    </div>
    <div data-bind="ifnot: inGame">
        <h3>Current Games:</h3>
        <div data-bind="foreach: lobby">
            <span data-bind="text: Name"></span><button type="button" data-bind="click: function () { $parent.gameId($data.Id); $parent.joinGame(); }">Join</button>
        </div>
        <h3>Start New Game:</h3>
        <input data-bind="value: newGameName" type="text" /><button type="button" data-bind="click: createGame">Start</button>
    </div>
    <h4>Logs:</h4>
    <div data-bind="foreach: logs">
        <div data-bind="text: $data"></div>
    </div>
    <!--Script references. -->
    <script src="~/Scripts/jquery-1.6.4.min.js"></script>
    <script src="~/Scripts/knockout-3.1.0.js"></script>
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.0.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.--> 
    <script>
        function SampleViewModel(sampleHub)
        {
            var self = this;
            self.server = sampleHub.server;
            self.logs = ko.observableArray([]);
            self.inGame = ko.observable(false);
            self.newGameName = ko.observable('');
            self.playerName = ko.observable('User ' + Math.floor(Math.random() * 1000));
            self.gameId = ko.observable('');
            self.players = ko.observableArray([]);
            self.lobby = ko.observableArray([]);
            self.createGame = function () {
                var gameName = self.newGameName();
                self.server.createGame(self.newGameName()).done(function (gameId) {
                    self.gameId(gameId);
                    self.joinGame();
                    self.logs.unshift('Created Game: ' + gameName);
                });
                self.newGameName('');
            };
            self.joinGame = function () {
                var gameId = self.gameId();
                self.server.joinGame(gameId, self.playerName()).done(function () {
                    self.inGame(true);
                    self.server.getGameInfo(gameId).done(function (gameInfo) {
                        self.logs.unshift('Joined Game: ' + gameInfo.Name);
                        self.server.getGamePlayers(gameId).done(function (players) {
                            self.players(players);
                        });
                    });
                });
            };
            self.leaveGame = function () {
                var gameId = self.gameId();
                self.server.getGameInfo(gameId).done(function (gameInfo) {
                    self.server.leaveGame(gameId).done(function () {
                        self.gameId('');
                        self.inGame(false);
                        self.players.removeAll();
                        self.logs.unshift('Left Game: ' + gameInfo.Name);
                    });
                });
            };
            self.playerJoined = function (playerInfo) {
                self.players.push(playerInfo);
                self.logs.unshift('Player Joined: ' + playerInfo.Name);
            };
            self.playerleft = function (playerInfo) {
                self.players.remove(playerInfo);
                self.logs.unshift('Player Left: ' + playerInfo.Name);
            };
            self.gameEnd = function (playerInfo) {
                self.gameId('');
                self.inGame(false);
                self.players.removeAll();
                self.logs.unshift('Game Ended');
            };
            self.addGameToLobby = function (gameInfo) {
                self.lobby.push(gameInfo);
            };
            self.removeGameFromLobby = function (gameInfo) {
                self.lobby.remove(gameInfo);
            };
            self.init = function () {
                self.server.getLobby().done(function (lobby) {
                    self.lobby(lobby);
                });
            };
            self.gameInfo = function (playerInfo) { /* TODO: Show updating game info */ };
            self.playerInfo = function (playerInfo) { /* TODO: Show updating player info */ };
            self.pokePlayer = function (player) {
                self.server.poke(self.gameId(), player.Id);
            };
            self.onPoke = function (params) {
                self.logs.unshift(params.Poker.Name + ' poked ' + params.Pokee.Name);
            };
            sampleHub.client.playerJoined = self.playerJoined;
            sampleHub.client.playerleft = self.playerleft;
            sampleHub.client.gameEnd = self.gameEnd;
            sampleHub.client.gameInfo = self.gameInfo;
            sampleHub.client.playerInfo = self.playerInfo;
            sampleHub.client.addGameToLobby = self.addGameToLobby;
            sampleHub.client.removeGameFromLobby = self.removeGameFromLobby;
            sampleHub.client.onPoke = self.onPoke;
        }
        $(document).ready(function () {
            var sampleHub = $.connection.sampleHub;
            var viewModel = new SampleViewModel(sampleHub);
            ko.applyBindings(viewModel);
            $.connection.hub.start().done(function () {
                viewModel.init();
            });
        });
    </script>
</body>
</html>
